"use client";

import { useState } from "react";
import { Mode, ModeToggle } from "@/components/ModeToggle";
import { SyllabusView } from "@/components/SyllabusView";
import type { SyllabusResult } from "@/types/recommendation";
import { signIn, useSession } from "next-auth/react";

export default function HomePage() {
  const [topic, setTopic] = useState("");
  const [mode, setMode] = useState<Mode>("intro_101");
  const [desiredCount, setDesiredCount] = useState<number>(16);
  const [loading, setLoading] = useState(false);
  const [syllabus, setSyllabus] = useState<SyllabusResult | null>(null);
  const [error, setError] = useState<string | null>(null);
  const session = useSession();

  async function onSubmit(e: React.FormEvent) {
    e.preventDefault();
    setError(null);
    setLoading(true);
    setSyllabus(null);
    try {
      const res = await fetch("/api/recommend", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ topic, mode, desiredCount }),
      });
      const data = await res.json();
      if (!res.ok) throw new Error(data?.error || "Failed to generate syllabus");
      setSyllabus(data as SyllabusResult);
    } catch (err) {
      setError((err as Error).message);
    } finally {
      setLoading(false);
    }
  }

  async function onCreatePlaylist() {
    if (!syllabus) return;
    const uris: string[] = [];
    for (const m of syllabus.modules) {
      for (const e of m.episodes) {
        if (e.spotifyUri) uris.push(e.spotifyUri);
      }
    }
    if (uris.length === 0) {
      setError("No Spotify episodes were resolved. Try connecting Spotify or adjust the topic.");
      return;
    }
    try {
      const name = `${syllabus.topic} ${syllabus.mode === "intro_101" ? "101" : "201"} Syllabus`;
      const description = `Syllabus generated by Podcast Learner for ${syllabus.topic} (${syllabus.mode}).`;
      const res = await fetch("/api/playlist", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ name, description, uris }),
      });
      const data = await res.json();
      if (!res.ok) throw new Error(data?.error || "Failed to create playlist");
      window.open(data.url, "_blank");
    } catch (err) {
      setError((err as Error).message);
    }
  }

  return (
    <div className="space-y-8">
      <form onSubmit={onSubmit} className="space-y-4">
        <div className="flex flex-wrap items-end gap-4">
          <div className="grow">
            <label className="block text-sm font-medium">Topic</label>
            <input
              value={topic}
              onChange={(e) => setTopic(e.target.value)}
              placeholder="e.g., Large Language Models"
              className="mt-1 w-full rounded-md border border-gray-300 bg-white p-2 text-sm shadow-sm focus:border-gray-500 focus:outline-none dark:border-gray-700 dark:bg-gray-900"
              required
            />
          </div>
          <div>
            <label className="block text-sm font-medium">Mode</label>
            <div className="mt-1"><ModeToggle value={mode} onChange={setMode} /></div>
          </div>
          <div>
            <label className="block text-sm font-medium">Episodes</label>
            <input
              type="number"
              min={6}
              max={24}
              value={desiredCount}
              onChange={(e) => setDesiredCount(Number(e.target.value))}
              className="mt-1 w-24 rounded-md border border-gray-300 bg-white p-2 text-sm shadow-sm focus:border-gray-500 focus:outline-none dark:border-gray-700 dark:bg-gray-900"
            />
          </div>
          <div className="ml-auto flex items-center gap-3">
            {session.status !== "authenticated" && (
              <button type="button" onClick={() => signIn("spotify")} className="rounded-md bg-green-600 px-3 py-2 text-sm font-medium text-white shadow hover:bg-green-700">Connect Spotify</button>
            )}
            <button type="submit" className="rounded-md bg-gray-900 px-3 py-2 text-sm font-medium text-white shadow hover:bg-black disabled:opacity-60" disabled={loading}>
              {loading ? "Generating..." : "Generate syllabus"}
            </button>
          </div>
        </div>
      </form>

      {error && (
        <div className="rounded-md border border-red-300 bg-red-50 p-3 text-sm text-red-800 dark:border-red-800 dark:bg-red-950 dark:text-red-200">{error}</div>
      )}

      {syllabus && (
        <div className="space-y-4">
          <SyllabusView syllabus={syllabus} />
          <div>
            <button onClick={onCreatePlaylist} className="rounded-md bg-green-600 px-4 py-2 text-sm font-medium text-white shadow hover:bg-green-700">Create Spotify playlist</button>
          </div>
        </div>
      )}
    </div>
  );
}

